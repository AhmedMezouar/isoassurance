{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport { fetchHospitalsByParams, fetchHospitals, SetCountry, SetWilaya, getHospitalMarkers, setCenter, leave_marker, mark_marker } from \"../../composable/index\";\nexport default {\n  components: {},\n  data() {\n    return {\n      mapCenter: {\n        lat: null,\n        lng: null\n      },\n      currentPosition: null,\n      distance: \"\",\n      typeData: \"map\",\n      search: false,\n      focust: false,\n      lat: \"\",\n      long: \"\",\n      nextPage: 1,\n      hospitals: [],\n      markers: [],\n      moreExists: false,\n      country: \"Algerie\",\n      wilaya: [],\n      wila: \"Alger\",\n      countries: [{\n        word: \"Algerie\",\n        fr: \"Algerie\",\n        en: \"Algeria\",\n        ar: \"الجزائر\",\n        tu: \"Cezayir\",\n        lat: 36.74442239909969,\n        long: 3.0726561299136623,\n        flag: \"inso-pics/dz.png\"\n      }, {\n        word: \"Tunisie\",\n        fr: \"Tunisie\",\n        en: \"Tunisia\",\n        ar: \"تونس\",\n        tu: \"Tunus\",\n        lat: 33.892166,\n        long: 9.561555,\n        flag: \"inso-pics/tunisie.png\"\n      }, {\n        word: \"Turc\",\n        fr: \"Turc\",\n        en: \"Turc\",\n        ar: \"تركيا\",\n        tu: \"Turc\",\n        lat: 40.945711799603615,\n        long: 29.21994356201801,\n        flag: \"inso-pics/tu.png\"\n      }],\n      dropd1: false,\n      dropd2: false,\n      destination: {},\n      path: [],\n      flightPath: null,\n      infoWindowPos: null,\n      infoContent: null,\n      currentMidx: null,\n      infoWinOpen: false,\n      closeModal: false,\n      filter: false,\n      flag: \"dz.png\",\n      flags: [\"dz.png\", \"tunisie.png\", \"tu.png\"]\n    };\n  },\n  computed: {\n    getCenter: {\n      get() {\n        return {\n          lat: this.$store.state.map.lat,\n          lng: this.$store.state.map.long\n        };\n      },\n      set() {\n        this.markers.push({\n          lat: this.$store.state.map.lat,\n          lng: this.$store.state.map.long\n        });\n      }\n    },\n    getFlightPath: {\n      get() {\n        return this.flightPath;\n      },\n      set(value) {\n        this.flightPath = value;\n      }\n    },\n    getMarkers() {\n      this.getHospitals;\n      getHospitalMarkers(this.$store, \"catalogue\");\n      return this.$store.state.catalogue.markers;\n    },\n    getHospitals() {\n      return this.$store.state.catalogue.hospitals;\n    },\n    getSpecialityName() {\n      return this.$store.state.speciality.specialityName;\n    },\n    getSpecialities() {\n      return this.$store.state.speciality.specialities;\n    },\n    tillOpnned() {\n      return this.closeModal;\n    }\n  },\n  methods: {\n    hoverMarker(index) {\n      mark_marker(index);\n    },\n    leaveMarker(index) {\n      leave_marker(index);\n    },\n    toggleInfoWindow: function (marker, idx) {\n      this.infoWindowPos = marker;\n      if (this.infoWindowPos) {\n        this.infoWinOpen = !this.infoWinOpen;\n        this.currentMidx = idx;\n        this.closeModal = false;\n      }\n    },\n    openSelected: function (index) {\n      if (index == this.currentMidx) {\n        if (!this.closeModal) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      return false;\n    },\n    close: function () {\n      this.closeModal = true;\n    },\n    gotolinks(link, index = 0) {\n      if (typeof link === \"undefined\" || link.length == 0) {\n        this.$store.commit(\"SET_typeModal\", {\n          index,\n          typeModal: \"hospital\"\n        });\n      } else {\n        if (!link.includes('https://')) {\n          link = 'https://' + link;\n        }\n        window.open(link);\n      }\n    },\n    closeit() {\n      this.$refs.searchtxt.value = null;\n      this.focust = false;\n      this.hideSearch();\n    },\n    showSearch() {\n      this.search = true;\n    },\n    hideSearch() {\n      !this.focust ? this.search = false : this.search;\n    },\n    fct() {\n      this.showSearch();\n      this.focust = true;\n    },\n    getCountryWilaya() {\n      //this.countries = this.$store.getters.getCountries;\n      if (this.country != \"country\") {\n        this.wilaya = this.$store.getters.getCountryById(this.country).wilaya;\n      }\n    },\n    changeMyCountry(key, index = 0) {\n      this.flag = this.flags[index];\n      this.dropd2 = false;\n      this.dropd1 = false;\n      if (key != \"country\") {\n        this.country = key;\n        this.getCountryWilaya();\n        SetCountry(this.$store, this.country, this.nextPage);\n        const {\n          lat,\n          long\n        } = this.$store.getters.getCountryById(this.country).name;\n        setCenter(this.$store, lat, long);\n        this.getHospitals;\n        this.getMark;\n      }\n    },\n    changeCountry(event) {\n      this.dropd2 = false;\n      this.dropd1 = false;\n      const country = event.target.value;\n      this.country = country;\n      this.getCountryWilaya();\n      SetCountry(this.$store, country, this.nextPage);\n      const {\n        lat,\n        long\n      } = this.$store.getters.getCountryById(this.country).name;\n      setCenter(this.$store, lat, long);\n      this.getHospitals;\n      this.getMarkers;\n    },\n    changeWilaya(event) {\n      const wilaya = event.target.value;\n      SetWilaya(this.$store, wilaya, this.nextPage);\n      this.getHospitals;\n      this.getMarkers;\n      const {\n        lat,\n        long\n      } = this.$store.getters.getWilayaById(this.country, wilaya);\n      setCenter(this.$store, lat, long);\n    },\n    WhatToShow() {\n      this.showAll = !this.showAll;\n    },\n    getRestrictedHospital(speciaName) {\n      fetchHospitalsByParams(this.$store, this.nextPage, speciaName);\n    },\n    handleInput(e) {\n      let speciaName = e.target.value;\n      fetchHospitalsByParams(this.$store, this.nextPage, speciaName);\n    },\n    getLocation(closure) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.long = position.coords.longitude;\n          this.lat = position.coords.latitude;\n          this.mapCenter.lat = position.coords.latitude;\n          this.mapCenter.lng = position.coords.longitude;\n          this.locationErrorMessage = \"\";\n          setCenter(this.$store, position.coords.latitude, position.coords.longitude);\n          /*  localStorage.setItem(\"storedData\", {\n              long: position.coords.longitude,\n              lat: position.coords.latitude,\n            });*/\n          closure();\n        }, error => {\n          if (error.code === 1) {\n            this.locationErrorMessage = \"Please allow location access.\";\n          } else {\n            console.log(error);\n          }\n        });\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n      /*}*/\n    },\n\n    degToRad(deg) {\n      return deg * (Math.PI / 180);\n    },\n    loadMore() {\n      try {\n        this.nextPage++;\n        fetchHospitals(this.$store, this.nextPage, this.long, this.lat, this.getSpecialityName);\n        this.moreExists = true;\n      } catch (error) {\n        this.moreExists = false;\n      }\n    },\n    mark(event) {\n      this.destination = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      };\n      this.drawDirection();\n    },\n    drawDirection() {\n      this.path = [this.getCenter, this.destination];\n      this.filePath = {\n        path: [this.getCenter, this.destination],\n        geodesic: false,\n        strokeColor: \"#22c7e5\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      };\n      this.getFlightPath = this.filePath;\n    },\n    openInfoWindowTemplate(position) {\n      const {\n        lat,\n        lng,\n        address\n      } = position;\n      this.infoWindow.position = {\n        lat: lat,\n        lng: lng\n      };\n      this.infoWindow.template = `<b>${address}</b>`;\n      this.infoWindow.isFractionalZoomEnabled = true;\n      this.infoWindow.open = true;\n    }\n  },\n  created() {\n    this.getCountryWilaya();\n    SetCountry(this.$store, this.country, this.nextPage);\n    this.getLocation(() => {\n      fetchHospitals(this.$store, this.nextPage, this.long, this.lat, this.getSpecialityName, this.country, \"\");\n    });\n  }\n};","map":{"version":3,"mappings":"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","names":["fetchHospitalsByParams","fetchHospitals","SetCountry","SetWilaya","getHospitalMarkers","setCenter","leave_marker","mark_marker","components","data","mapCenter","lat","lng","currentPosition","distance","typeData","search","focust","long","nextPage","hospitals","markers","moreExists","country","wilaya","wila","countries","word","fr","en","ar","tu","flag","dropd1","dropd2","destination","path","flightPath","infoWindowPos","infoContent","currentMidx","infoWinOpen","closeModal","filter","flags","computed","getCenter","get","$store","state","map","set","push","getFlightPath","value","getMarkers","getHospitals","catalogue","getSpecialityName","speciality","specialityName","getSpecialities","specialities","tillOpnned","methods","hoverMarker","index","leaveMarker","toggleInfoWindow","marker","idx","openSelected","close","gotolinks","link","length","commit","typeModal","includes","window","open","closeit","$refs","searchtxt","hideSearch","showSearch","fct","getCountryWilaya","getters","getCountryById","changeMyCountry","key","name","getMark","changeCountry","event","target","changeWilaya","getWilayaById","WhatToShow","showAll","getRestrictedHospital","speciaName","handleInput","e","getLocation","closure","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","locationErrorMessage","error","code","console","log","degToRad","deg","Math","PI","loadMore","mark","latLng","drawDirection","filePath","geodesic","strokeColor","strokeOpacity","strokeWeight","openInfoWindowTemplate","address","infoWindow","template","isFractionalZoomEnabled","created"],"sourceRoot":"","sources":["/Users/you/Desktop/work_dev/inso-frontend-master/src/components/newinterface/FilterComponent.vue"],"sourcesContent":["\n<template>\n  <!-- FILTRAGE -->\n  <div class=\"card card-special\">\n    <div class=\"card-body\">\n      <p>FILTER</p>\n          <div class=\"row\">\n            <div class=\" col-12 mb-2\">\n          <input type=\"text\" class=\"btnData contr search form-control afficher\" placeholder=\"Rechercher ...\"\n          @keyup.stop=\"handleInput($event); gotores($event)\"\n          @click=\"fct()\" name=\"search\" id=\"search\" ref=\"searchtxt\" >                      \n        </div>\n      </div>\n      <div class=\"row\" style=\"font-size: 12px; position: relative;\">\n        <div class=\"col-6 mb-2\">\n                  <div @click=\"\n                  dropd1 = !dropd1;\n                dropd2 = false;\n                \" class=\"\">\n<button class=\"form-select select-speciale\">\n                    <span v-show=\"country === ''\">\n                      {{ $store.getters.getT(\"country\") }}\n                    </span>\n                    <div v-show=\"cc.word === country\" v-for=\"cc in countries\" :key=\"cc\"\n                      @click=\"changeMyCountry(cc.word)\" class=\"flex items-center cursor-pointer\">\n                      <span v-show=\"$store.getters.getL === 'en'\">{{\n                        cc.en\n                      }}</span>\n                      <span v-show=\"$store.getters.getL === 'fr'\">{{\n                        cc.fr\n                      }}</span>\n                      <span v-show=\"$store.getters.getL === 'ar'\">{{\n                        cc.ar\n                      }}</span>\n                      <span v-show=\"$store.getters.getL === 'tu'\">{{\n                        cc.tu\n                      }}</span>\n                    </div>\n                  </button>                        </div>\n                <ul v-show=\"dropd1\" class=\"absolute p-2 bg-white shadow-sm z-20 list-pays\">\n                  \n\n                  <li v-for=\"(cc, index) in countries\" :key=\"cc\" @click=\"changeMyCountry(cc.word, index)\"\n                    class=\"li-pays\">\n                    <span v-show=\"$store.getters.getL === 'en'\">{{ cc.en }}</span>\n                    <span v-show=\"$store.getters.getL === 'fr'\">{{ cc.fr }}</span>\n                    <span v-show=\"$store.getters.getL === 'ar'\">{{ cc.ar }}</span>\n                    <span v-show=\"$store.getters.getL === 'tu'\">{{ cc.tu }}</span>\n                  </li>\n                </ul>\n              </div>\n\n        <div class=\" col-6\">\n          <select name=\"wilaya\" class=\"form-select select-speciale\" :class=\"[country != 'country' ? 'choosedData' : '']\" aria-label=\"Default select example\"\n          @change=\"changeWilaya($event)\">\n            <option value=\"\" selected disabled>{{ $store.getters.getT(\"wilaya\") }}</option>\n            <option v-for=\"cc, in wilaya\" :key=\"cc\" :value=\"cc.value\">\n              <span v-if=\"$store.getters.getL === 'ar'\">{{\n                cc.ar_name\n              }}</span>\n              <span v-else>{{ cc.fr_name }}</span>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n  \n  <style scoped>\n  \n  </style>\n  <script>\nimport {\n  fetchHospitalsByParams,\n  fetchHospitals,\n  SetCountry,\n  SetWilaya,\n  getHospitalMarkers,\n  setCenter,leave_marker,mark_marker\n} from \"../../composable/index\";\n\nexport default {\n  components: {\n    \n  },\n  data() {\n    return {\n      mapCenter: {\n        lat: null,\n        lng: null,\n      },\n      currentPosition: null,\n      distance: \"\",\n\n      typeData: \"map\",\n      search: false,\n      focust: false,\n      lat: \"\",\n      long: \"\",\n      nextPage: 1,\n      hospitals: [],\n      markers: [],\n      moreExists: false,\n      country: \"Algerie\",\n      wilaya: [],\n      wila: \"Alger\",\n      countries: [{\n          word: \"Algerie\",\n          fr: \"Algerie\",\n          en: \"Algeria\",\n          ar: \"الجزائر\",\n          tu: \"Cezayir\",\n          lat: 36.74442239909969,\n          long: 3.0726561299136623,\n          flag: \"inso-pics/dz.png\",\n        }, \n        {\n          word: \"Tunisie\",\n          fr: \"Tunisie\",\n          en: \"Tunisia\",\n          ar: \"تونس\",\n          tu: \"Tunus\",\n          lat: 33.892166,\n          long: 9.561555,\n          flag: \"inso-pics/tunisie.png\",\n        },\n        {\n          word:\"Turc\",\n          fr: \"Turc\",\n          en: \"Turc\",\n          ar: \"تركيا\",\n          tu: \"Turc\",\n          lat: 40.945711799603615,\n          long: 29.21994356201801,\n          flag: \"inso-pics/tu.png\",\n        },],\n      dropd1: false,\n      dropd2: false,\n      destination: {},\n      path: [],\n      flightPath: null,\n      infoWindowPos: null,\n      infoContent: null,\n      currentMidx: null,\n      infoWinOpen: false,\n      closeModal: false,\n      filter: false,\n      flag: \"dz.png\",\n      flags: [\n        \"dz.png\",\n        \"tunisie.png\",\n        \"tu.png\",\n\n      ],\n    };\n  },\n  computed: {\n    getCenter: {\n      get() {\n        return {\n          lat: this.$store.state.map.lat,\n          lng: this.$store.state.map.long,\n        };\n      },\n      set() {\n        this.markers.push({\n          lat: this.$store.state.map.lat,\n          lng: this.$store.state.map.long,\n        });\n      },\n    },\n    getFlightPath: {\n      get() {\n        return this.flightPath\n      },\n      set(value) {\n        this.flightPath = value\n      },\n    },\n    getMarkers() {\n      this.getHospitals;\n      getHospitalMarkers(this.$store, \"catalogue\");\n      return this.$store.state.catalogue.markers;\n    },\n    getHospitals() {\n      return this.$store.state.catalogue.hospitals;\n    },\n    getSpecialityName() {\n      return this.$store.state.speciality.specialityName;\n    },\n    getSpecialities() {\n      return this.$store.state.speciality.specialities;\n    },\n    tillOpnned() {\n      return this.closeModal\n    },\n  },\n\n  methods: {\n    hoverMarker(index) {\n      mark_marker(index)\n    },\n    leaveMarker(index) {\n      leave_marker(index)\n    },\n    toggleInfoWindow: function (marker, idx) {\n\n      this.infoWindowPos = marker;\n\n      if (this.infoWindowPos) {\n        this.infoWinOpen = !this.infoWinOpen;\n        this.currentMidx = idx;\n        this.closeModal = false;\n      }\n    },\n    openSelected: function (index) {\n      if (index == this.currentMidx) {\n        if (!this.closeModal) {\n          return true\n        } else {\n          return false;\n        }\n\n      }\n      return false\n    },\n    close: function () {\n      this.closeModal = true;\n    },\n    gotolinks(link, index = 0) {\n      if (typeof link === \"undefined\" || link.length == 0) {\n        this.$store.commit(\"SET_typeModal\", { index, typeModal: \"hospital\" });\n      } else {\n        if (!link.includes('https://')) {\n          link = 'https://' + link\n        }\n        window.open(link);\n      }\n    },\n   \n    closeit() {\n      this.$refs.searchtxt.value = null;\n      this.focust = false;\n      this.hideSearch()\n    },\n    showSearch() {\n      this.search = true\n    },\n    hideSearch() {\n      !this.focust ? this.search = false : this.search\n    },\n    fct() {\n      this.showSearch()\n      this.focust = true\n    },\n    getCountryWilaya() {\n      //this.countries = this.$store.getters.getCountries;\n      if (this.country != \"country\") {\n        this.wilaya = this.$store.getters.getCountryById(this.country).wilaya;\n      }\n    },\n    changeMyCountry(key, index = 0) {\n      this.flag = this.flags[index]\n      this.dropd2 = false;\n      this.dropd1 = false;\n      if (key != \"country\") {\n        this.country = key;\n        this.getCountryWilaya();\n        SetCountry(this.$store, this.country, this.nextPage);\n        const { lat, long } = this.$store.getters.getCountryById(\n          this.country\n        ).name;\n\n        setCenter(this.$store, lat, long);\n        this.getHospitals;\n        this.getMark;\n      }\n    },\n    changeCountry(event) {\n      this.dropd2 = false;\n      this.dropd1 = false;\n      const country = event.target.value;\n      this.country = country;\n      this.getCountryWilaya();\n      SetCountry(this.$store, country, this.nextPage);\n      const { lat, long } = this.$store.getters.getCountryById(\n        this.country\n      ).name;\n      setCenter(this.$store, lat, long);\n      this.getHospitals;\n      this.getMarkers;\n    },\n    changeWilaya(event) {\n      const wilaya = event.target.value;\n      SetWilaya(this.$store, wilaya, this.nextPage);\n      this.getHospitals;\n      this.getMarkers;\n\n      const { lat, long } = this.$store.getters.getWilayaById(\n        this.country,\n        wilaya\n      );\n      setCenter(this.$store, lat, long);\n    },\n    WhatToShow() {\n      this.showAll = !this.showAll;\n    },\n    getRestrictedHospital(speciaName) {\n      fetchHospitalsByParams(this.$store, this.nextPage, speciaName);\n    },\n    handleInput(e) {\n      let speciaName = e.target.value;\n      fetchHospitalsByParams(this.$store, this.nextPage, speciaName);\n    },\n    getLocation(closure) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            this.long = position.coords.longitude;\n            this.lat = position.coords.latitude;\n            this.mapCenter.lat = position.coords.latitude;\n            this.mapCenter.lng = position.coords.longitude;\n            this.locationErrorMessage = \"\";\n            setCenter(\n              this.$store,\n              position.coords.latitude,\n              position.coords.longitude\n            );\n            /*  localStorage.setItem(\"storedData\", {\n                long: position.coords.longitude,\n                lat: position.coords.latitude,\n              });*/\n            closure();\n          },\n          (error) => {\n            if (error.code === 1) {\n              this.locationErrorMessage = \"Please allow location access.\";\n            } else {\n              console.log(error)\n            }\n          }\n        );\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n      /*}*/\n    },\n    degToRad(deg) {\n      return deg * (Math.PI / 180);\n    },\n    loadMore() {\n      try {\n        this.nextPage++;\n        fetchHospitals(\n          this.$store,\n          this.nextPage,\n          this.long,\n          this.lat,\n          this.getSpecialityName\n        );\n        this.moreExists = true;\n      } catch (error) {\n        this.moreExists = false;\n      }\n    },\n    mark(event) {\n      this.destination = { lat: event.latLng.lat(), lng: event.latLng.lng() };\n      this.drawDirection();\n    },\n    drawDirection() {\n      this.path = [this.getCenter, this.destination];\n      this.filePath = {\n        path: [\n          this.getCenter, this.destination\n        ],\n        geodesic: false,\n        strokeColor: \"#22c7e5\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2,\n      };\n      this.getFlightPath = this.filePath;\n    },\n    openInfoWindowTemplate(position) {\n      const { lat, lng, address } = position\n      this.infoWindow.position = { lat: lat, lng: lng }\n      this.infoWindow.template = `<b>${address}</b>`\n\n      this.infoWindow.isFractionalZoomEnabled = true\n      this.infoWindow.open = true\n    },\n    \n  \n  },\n  created() {\n\n    this.getCountryWilaya();\n    SetCountry(this.$store, this.country, this.nextPage);\n\n    this.getLocation(() => {\n      fetchHospitals(\n        this.$store,\n        this.nextPage,\n        this.long,\n        this.lat,\n        this.getSpecialityName,\n        this.country,\n        \"\"\n      );\n    });\n  },\n\n};\n  </script>\n  \n  \n  "]},"metadata":{},"sourceType":"module"}